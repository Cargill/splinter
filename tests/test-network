#!/bin/bash
# Copyright 2018-2020 Cargill Incorporated
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

info() {
    printf '%s %s\n' \
        "$(date '+%b %d %T')" \
     "$1"
}

circuit_propose(){
    info "--== sending circuit proposal from $1 ==--"

    proposed_circuit=$(splinter circuit propose \
    --key /key_registry_shared/$1.priv \
    --url http://splinterd-$1:8085  \
    --node alpha::tls://splinterd-alpha:8044 \
    --node beta::tls://splinterd-beta:8044 \
    --service gsAA::alpha \
    --service gsBB::beta \
    --service-type *::scabbard \
    --management $2 \
    --service-arg *::admin_keys=$(cat /key_registry_shared/$1.pub) \
    --service-peer-group gsAA,gsBB | grep "Circuit:" |awk '{print $2}')

    info "--== proposed circuit $proposed_circuit ==--"
}

circuit_accept(){
    info "--== accepting circuit proposal from $1 ==--"

    splinter circuit vote \
    --key /key_registry_shared/$1.priv \
    --url http://splinterd-$1:8085 \
    $proposed_circuit \
    --accept
}

circuit_list(){
    info "--== circuit list from $1 ==--"

    splinter circuit list \
    --url http://splinterd-$1:8085
    echo
}

proposal_list(){
    info "--== proposal list from $1 ==--"

    splinter circuit proposals \
    --url http://splinterd-$1:8085
    echo
}

circuit_wait(){
    end=$((SECONDS+10))
    while [ $SECONDS -lt $end ]; do
        splinter circuit list --url http://splinterd-$1:8085 | grep -q $2
        if [ $? -eq 0 ]; then
            info "$1 - Found circuit $2"
            return 0
        else
            sleep 1
        fi
    done
    info "Unable to find circuit after 10 seconds"
    exit 1
}

proposal_wait(){
    end=$((SECONDS+10))
    while [ $SECONDS -lt $end ]; do
        splinter circuit proposals --url http://splinterd-$1:8085 | grep -q $2
        if [ $? -eq 0 ]; then
            info "$1 - Found proposal $2"
            return 0
        else
            sleep 1
        fi
    done
    info "Unable to find proposal after 10 seconds"
    exit 1
}

circuit_propose alpha test1

proposal_wait beta $proposed_circuit

circuit_accept beta

circuit_wait alpha $proposed_circuit
circuit_wait beta $proposed_circuit

unset proposed_circuit

info "--== network down on alpha ==--"
docker-compose -f pumba.yaml up -d

while $(docker ps |grep -q pumba-loss); [ $? -ne 1 ]; do
    info "waiting for pumba to exit"
    sleep 5
done

info "--== networking has been restored to alpha ==--"

curl http://splinterd-alpha:8085

circuit_propose beta test2

proposal_wait alpha $proposed_circuit

circuit_accept alpha

circuit_wait alpha $proposed_circuit
circuit_wait beta $proposed_circuit

info "--== cleaning up ==--"
docker rm $(docker ps -a | grep iproute2 | awk {'print $1'})
