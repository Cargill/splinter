# Copyright 2019 Cargill Incorporated
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

openapi: '3.0.0'

info:
  version: 0.3.8
  title: SplinterD API
  description: REST API for SplinterD

servers:
  - url: http://localhost:9000/api

paths:
  /status:
    get:
      tags:
        - diagnostics
      description: Used to check if server is successfully running
      responses:
        200:
          description: Server is running correctly and accepting connections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/submit:
    post:
      tags:
        - Admin Service
      description: Send circuit management payload in bytes to admin service
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        202:
          description: The circuit management payload was accepted
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /ws/admin/register/{type}:
    get:
      tags:
        - Admin Service
      description: Register the handler for a circuit management type
      parameters:
        - name: type
          description: The circuit management type is the type of circuit the handler will manage
          in: path
          required: true
          schema:
            type: string
          x-example: gameroom
        - name: last
          description: A timestamp in milliseconds from the Unix Epoch, indicating the last received event.
          in: query
          required: false
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: Registration request was successfully submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationRegistration'
        400:
          description: The circuit management type was invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /circuits:
    get:
      tags:
          - Circuits
      description: Experimental - List of circuits in Splinter state
      parameters:
        - name: offset
          in: query
          description: paging offset
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: maximum number of items to return (max 100)
          required: false
          schema:
            type: integer
            default: 100
        - name: filter
          in: query
          description: node id that must be present in the circuits returned
          required: false
          schema:
            type: string
          example: "node-001"
      responses:
        200:
          description: list of circuits
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Circuit'
                  paging:
                    $ref: '#/components/schemas/Paging'
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /circuits/{circuit_id}:
    get:
      tags:
        - Circuits
      description: Experimental - Fetch a circuit in Splinter State by its circuit id
      parameters:
        - name: circuit_id
          in: path
          description: cirucit id of circuit to fetch
          required: true
          schema:
            type: string
      responses:
        200:
          description: Circuit
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Circuit"
        404:
          description: The circuit with {circuit_id} was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /keys:
    get:
      tags:
        - Key Registry
      description: List public key information in the Key Registry
      parameters:
        - name: offset
          in: query
          description: paging offset
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: maximum number of items to return (max 100)
          required: false
          schema:
            type: integer
            default: 100
      responses:
        200:
          description: list of public key data objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PublicKeyInfo'
                  paging:
                    $ref: '#/components/schemas/Paging'
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /keys/{public_key}:
    get:
      tags:
        - Key Registry
      description: Fetch public key information in the Key Registry by public key
      parameters:
        - name: public_key
          in: path
          description: public key to query, in hex
          required: true
          schema:
            type: string
      responses:
        200:
          description: Node
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/PublicKeyInfo"
        400:
          description: "{public_key} was malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The information for {public_key} was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nodes:
    post:
      tags:
        - Node Registry
      description: Add node to the Node Registry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisteredNode'
      responses:
        200:
          description: The node was added to the registry
        400:
          description: The request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The node already exists or is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Node Registry
      description: Replace the entire Node Registry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RegisteredNode'
      responses:
        200:
          description: The registry was successfully replaced
        400:
          description: The request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: A node was invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - Node Registry
      description: List nodes in the Node Registry
      parameters:
        - name: offset
          in: query
          description: paging offset
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: maximum number of items to return (max 100)
          required: false
          schema:
            type: integer
            default: 100
        - name: filter
          in: query
          description: |
            url-encodeded stringified JSON containing property filters on the
            node's metadata properties in the format
              {METADATA_PROPERTY:[{"operator":OPERATOR,"value":VALUE}]}
          required: false
          schema:
            type: string
          example: "%7B%22company%22%3A%5B%22%3D%22%2C%22Cargill%22%5D%7D"
      responses:
        200:
          description: list of nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RegisteredNode'
                  paging:
                    $ref: '#/components/schemas/Paging'
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nodes/{identity}:
    get:
      tags:
        - Node Registry
      description: Fetch a nodes in the Node Registry by their identity
      parameters:
        - name: identity
          in: path
          description: identity of node to fetch
          required: true
          schema:
            type: string
      responses:
        200:
          description: Node
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/RegisteredNode"
        404:
          description: The node with {identity} was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Node Registry
      description: Add a node to or replace a node in the Node Registry. This action is idempotent.
      parameters:
        - name: identity
          in: path
          description: identity of node to add/replace
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisteredNode'
      responses:
        200:
          description: The node in the registry has been replaced
        400:
          description: The request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The node was invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Node Registry
      description: Delete a node from the Node Registry
      parameters:
        - name: identity
          in: path
          description: identity of node to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: The node has been deleted from the registry
        404:
          description: The node with {identity} was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scabbard/{circuit}/{service_id}/batches:
    post:
      description: Send a list of Sabre batches to the specified Scabbard service
      parameters:
        - name: circuit
          in: path
          description: circuit the targeted service belongs to
          required: true
          schema:
            type: string
        - name: service_id
          in: path
          description: ID of the targeted service
          required: true
          schema:
            type: string
      responses:
        202:
          description: Batch has been submitted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Link"
        404:
          description: circuit id or service id not found
        500:
          description: Internal service error

  /scabbard/{circuit}/{service_id}/batch_statuses:
    post:
      description: Send a list of Sabre batches to the specified Scabbard service
      parameters:
        - name: circuit
          in: path
          description: circuit the targeted service belongs to
          required: true
          schema:
            type: string
        - name: service_id
          in: path
          description: ID of the targeted service
          required: true
          schema:
            type: string
        - name: ids
          in: query
          description: Comma separated list of batch ids
          required: true
          schema:
            type: string
      responses:
        200:
          description: Batch has been submitted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BatchStatus'
        404:
          description: circuit id or service id not found
        400:
          description: Malformed ids list
        500:
          description: Internal service error

components:
  schemas:
    Error:
      additionalProperties: false
      properties:
        message:
          description: A message describing the error that occurred
          type: string
          example: DatabaseError({description})
      required:
        - message

    Status:
      additionalProperties: false
      properties:
        version:
          description: Rest API version
          type: string
          example: "0.3.8"
        node_id:
          description: Node id
          type: string
          example: node-009
        endpoint:
          description: The node's service endpoint
          example: tcp://foo.bar.biz
      required:
        - version

    ApplicationRegistration:
      additionalProperties: false
      properties:
        status:
          description: Registration status
          type: string
          enum:
            - OK
            - ERROR
        circuit_management_type:
          description: Circuit management type
          type: string
          example: gameroom
        error_reason:
          description: Error message if the registration failed
          type: string

    RegisteredNode:
      type: object
      properties:
        identity:
          type: string
        endpoint:
          type: string
        display_name:
          type: string
        metadata:
          type: object
      example:
        identity: node-123123-asdf
        endpoint: tls://12.0.0.123:8431
        display_name: Cargill - Node 1
        metadata:
          company: Cargill
          status: Up

    PublicKeyInfo:
      type: object
      properties:
        public_key:
          type: string
        node_id:
          type: string
        metadata:
          type: object
          additionalProperties: true
          example:
            name: Jane User
            organization: Acme Corporation

    Link:
      type: object
      properties:
        link:
          type: string
          description: link to batch_statuses endpoint
          example: "/scabbard/{circuit_id}/{service_id}/batch_statuses?ids={ids}"

    BatchStatus:
      type: object
      properties:
        id:
          type: string
          description: Batch header signature
          example: 6ff35474a572087e08fd6a54d563bd8172951b363e5c9731f1a40a855e14bba45dac515364a08d8403f4fb5d4a206174b7f63c29e4f4e425dc71b95494b8a798
        status:
          type: object
          description: Batch status
          properties:
            statusType:
              type: string
              enum:
                - Unknown
                - Invalid
                - Valid
                - Pending
                - Committed
            message:
                type: array
                items:
                  type: object
                  properties:
                    transaction_id:
                      type: string
                      example: f4e147ff464013deccb3e68bb8619beffb29ff86b401257c93bcf8ef76d7ca173fa84b4f4a58414ad2d00a2c9f810cbb726e01cd26ebd44720239d9d35853099
                    error_message:
                      type: string
                      example: "Wasm contract returned invalid transaction: xo, 0.3.3"
                    error_data:
                      type: array
                      items:
                        type: integer
    Circuit:
      type: object
      properties:
        circuit_id:
          type: string
          example: alpha
        authorization_type:
          type: string
          example: Trust
        persistence:
          type: string
          example: Any
        routes:
          type: string
          example: Any
        circuit_management_type:
          type: string
          example: Gameroom
        members:
          type: array
          items:
            $ref: '#/components/schemas/CircuitMember'
        roster:
          type: array
          items:
            $ref: '#/components/schemas/CircuitService'

    CircuitMember:
      type: object
      properties:
        node_id:
          type: string
          example: node-000
        endpoint:
          type: string
          example: tls://127.0.0.1:8080

    CircuitService:
      type: object
      properties:
        service_id:
          type: string
          example: service-a
        service_type:
          type: string
          example: scabbard
        allowed_nodes:
          type: array
          item: string

    Paging:
      type: object
      properties:
        current:
          type: string
        offset:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        first:
          type: string
        prev:
          type: string
        next:
          type: string
        last:
          type: string
      example:
        current: /nodes?offset=10&limit=10
        offset: 10
        limit: 10
        total: 50
        first: /nodes?offset=0&limit=10
        prev: /nodes?offset=0&limit=10
        next: /nodes?offset=20&limit=10
        last: /nodes?offset=40&limit=10
