# Copyright 2018-2021 Cargill Incorporated
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

openapi: '3.0.0'

info:
  version: 0.3.12
  title: SplinterD API
  description: REST API for SplinterD

servers:
  - url: http://localhost:9000/api

paths:
  /status:
    get:
      tags:
        - diagnostics
      description: Used to check if server is successfully running
      parameters:
        - $ref: "#/components/parameters/protocol_version"
      responses:
        200:
          description: Server is running correctly and accepting connections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/proposals:
    get:
      tags:
          - Proposals
      description: Experimental - List of proposals in Admin Service state
      parameters:
        - $ref: "#/components/parameters/protocol_version"
        - name: offset
          in: query
          description: paging offset
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: maximum number of items to return (max 100)
          required: false
          schema:
            type: integer
            default: 100
        - name: filter
          in: query
          description: circuit management type of the proposed circuit
          required: false
          schema:
            type: string
          example: "my-type"
      responses:
        200:
          description: list of proposals
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Proposal'
                  paging:
                    $ref: '#/components/schemas/Paging'
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/proposals/{circuit_id}:
    get:
      tags:
        - Proposals
      description: Experimental - Fetch a proposal in Admin Service state by its circuit id
      parameters:
        - $ref: "#/components/parameters/protocol_version"
        - name: circuit_id
          in: path
          description: circuit id of the proposal to fetch
          required: true
          schema:
            type: string
      responses:
        200:
          description: Proposal
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Proposal"
        404:
          description: The proposal with {circuit_id} was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/submit:
    post:
      tags:
        - Admin Service
      description: Send circuit management payload in bytes to admin service
      parameters:
        - $ref: "#/components/parameters/protocol_version"
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        202:
          description: The circuit management payload was accepted
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /ws/admin/register/{type}:
    get:
      tags:
        - Admin Service
      description: Register the handler for a circuit management type
      parameters:
        - $ref: "#/components/parameters/protocol_version"
        - name: type
          description: The circuit management type is the type of circuit the handler will manage
          in: path
          required: true
          schema:
            type: string
          x-example: gameroom
        - name: last
          description: A timestamp in milliseconds from the Unix Epoch, indicating the last received event.
          in: query
          required: false
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: Registration request was successfully submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationRegistration'
        400:
          description: The circuit management type was invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/circuits:
    get:
      tags:
          - Circuits
      description: Experimental - List of circuits in Splinter state
      parameters:
        - $ref: "#/components/parameters/protocol_version"
        - name: offset
          in: query
          description: paging offset
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: maximum number of items to return (max 100)
          required: false
          schema:
            type: integer
            default: 100
        - name: filter
          in: query
          description: node id that must be present in the circuits returned
          required: false
          schema:
            type: string
          example: "node-001"
      responses:
        200:
          description: list of circuits
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Circuit'
                  paging:
                    $ref: '#/components/schemas/Paging'
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/circuits/{circuit_id}:
    get:
      tags:
        - Circuits
      description: Experimental - Fetch a circuit in Splinter State by its circuit id
      parameters:
        - $ref: "#/components/parameters/protocol_version"
        - name: circuit_id
          in: path
          description: cirucit id of circuit to fetch
          required: true
          schema:
            type: string
      responses:
        200:
          description: Circuit
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Circuit"
        404:
          description: The circuit with {circuit_id} was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/keys:
    get:
      tags:
        - Key Registry
      description: List public key information in the Key Registry
      parameters:
        - $ref: "#/components/parameters/protocol_version"
        - name: offset
          in: query
          description: paging offset
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: maximum number of items to return (max 100)
          required: false
          schema:
            type: integer
            default: 100
      responses:
        200:
          description: list of public key data objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PublicKeyInfo'
                  paging:
                    $ref: '#/components/schemas/Paging'
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/keys/{public_key}:
    get:
      tags:
        - Key Registry
      description: Fetch public key information in the Key Registry by public key
      parameters:
        - $ref: "#/components/parameters/protocol_version"
        - name: public_key
          in: path
          description: public key to query, in hex
          required: true
          schema:
            type: string
      responses:
        200:
          description: Node
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/PublicKeyInfo"
        400:
          description: "{public_key} was malformed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The information for {public_key} was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/nodes:
    post:
      tags:
        - Node Registry
      description: Add node to the Node Registry
      parameters:
        - $ref: "#/components/parameters/protocol_version"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisteredNode'
      responses:
        200:
          description: The node was added to the registry
        400:
          description: The request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The node already exists or is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - Node Registry
      description: List nodes in the Node Registry
      parameters:
        - $ref: "#/components/parameters/protocol_version"
        - name: offset
          in: query
          description: paging offset
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: maximum number of items to return (max 100)
          required: false
          schema:
            type: integer
            default: 100
        - name: filter
          in: query
          description: |
            url-encodeded stringified JSON containing property filters on the
            node's metadata properties in the format
              {METADATA_PROPERTY:[{"operator":OPERATOR,"value":VALUE}]}
          required: false
          schema:
            type: string
          example: "%7B%22company%22%3A%5B%22%3D%22%2C%22Cargill%22%5D%7D"
      responses:
        200:
          description: list of nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RegisteredNode'
                  paging:
                    $ref: '#/components/schemas/Paging'
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/nodes/{identity}:
    get:
      tags:
        - Node Registry
      description: Fetch a nodes in the Node Registry by their identity
      parameters:
        - $ref: "#/components/parameters/protocol_version"
        - name: identity
          in: path
          description: identity of node to fetch
          required: true
          schema:
            type: string
      responses:
        200:
          description: Node
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/RegisteredNode"
        404:
          description: The node with {identity} was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Node Registry
      description: Add a node to or replace a node in the Node Registry. This action is idempotent.
      parameters:
        - $ref: "#/components/parameters/protocol_version"
        - name: identity
          in: path
          description: identity of node to add/replace
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisteredNode'
      responses:
        200:
          description: The node in the registry has been replaced
        400:
          description: The request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The node was invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Node Registry
      description: Delete a node from the Node Registry
      parameters:
        - $ref: "#/components/parameters/protocol_version"
        - name: identity
          in: path
          description: identity of node to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: The node has been deleted from the registry
        404:
          description: The node with {identity} was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scabbard/{circuit}/{service_id}/batches:
    post:
      description: Send a list of Sabre batches to the specified Scabbard service
      parameters:
        - $ref: "#/components/parameters/protocol_version"
        - name: circuit
          in: path
          description: circuit the targeted service belongs to
          required: true
          schema:
            type: string
        - name: service_id
          in: path
          description: ID of the targeted service
          required: true
          schema:
            type: string
      responses:
        202:
          description: Batch has been submitted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Link"
        404:
          description: The scabbard service was not found, or the circuit id or service id was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scabbard/{circuit}/{service_id}/batch_statuses:
    post:
      description: Send a list of Sabre batches to the specified Scabbard service
      parameters:
        - $ref: "#/components/parameters/protocol_version"
        - name: circuit
          in: path
          description: circuit the targeted service belongs to
          required: true
          schema:
            type: string
        - name: service_id
          in: path
          description: ID of the targeted service
          required: true
          schema:
            type: string
        - name: ids
          in: query
          description: Comma separated list of batch ids
          required: true
          schema:
            type: string
        - name: wait
          in: query
          description: time (in seconds) to wait for batches to be committed
          required: false
          schema:
            type: integer
            default: 300
      responses:
        200:
          description: Batch has been submitted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BatchStatus'
        404:
          description: The scabbard service was not found, or the circuit id or service id was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        400:
          description: Malformed ids list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        408:
          description: Batches did not complete before specified wait
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scabbard/{circuit}/{service_id}/state:
    get:
      description: Experimental - Get a list of entries in state from the specified Scabbard service
      parameters:
        - $ref: "#/components/parameters/protocol_version"
        - name: circuit
          in: path
          description: circuit the targeted service belongs to
          required: true
          schema:
            type: string
        - name: service_id
          in: path
          description: ID of the targeted service
          required: true
          schema:
            type: string
        - name: prefix
          in: query
          description: The address prefix for filtering state entries
          required: false
          schema:
            type: string
            example: 00ec01
      responses:
        200:
          description: List of entries in state (under given address prefix, if specified)
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    value:
                      type: array
                      items:
                        type: integer
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The scabbard service was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scabbard/{circuit}/{service_id}/state/{address}:
    get:
      description: Experimental - Get the value at a given address in state from the specified Scabbard service
      parameters:
        - $ref: "#/components/parameters/protocol_version"
        - name: circuit
          in: path
          description: circuit the targeted service belongs to
          required: true
          schema:
            type: string
        - name: service_id
          in: path
          description: ID of the targeted service
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: The address of the value to retrieve from state
          required: true
          schema:
            type: string
            example: 000000a87cb5eafdcca6a814e4add97c4b517d3c530c2f44b31d18e3b0c44298fc1c14
      responses:
        200:
          description: The value at the requested address
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The scabbard service was not found, or there is no value at the given address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /biome/register:
    post:
      tags:
        - Biome
      description: Create new user with username and password credentials
      parameters:
        - $ref: "#/components/parameters/protocol_version"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  description: username of a new user
                hashed_password:
                  description: |
                     Hashed password to be used for user authentication
              required:
                - username
                - hashed_password
              example:
                username: alice@acme.com
                hashed_password: F4AABE0B40C9ABB8B6FD2EEACB39C965
      responses:
        200:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
        400:
          description: Invalid request
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'
        500:
          description: Internal server error occurred
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'

  /biome/login:
    post:
      tags:
        - Biome
      description: Authenticates a user with username and password credentials
      parameters:
        - $ref: "#/components/parameters/protocol_version"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  description: username of user
                hashed_password:
                  description: |
                    Hashed password to be used for user authentication

              required:
                - username
                - hashed_password
              example:
                username: alice@acme.com
                hashed_password: |-
                  8945622435187243046536949706b5272644c71336c7254563679727565494b376d4b3554696b734662685962652f6v52562e437a70462f6552489c8b
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successful login"
                  user_id:
                    type: string
                    description: "Internal unique identifier for the user"
                    example: "f35aacc1-a9cd-4eda-b6d0-2efaddf0c8a4"
                  token:
                    type: string
                    description: "JWT access token used for authorizing access to protected resources"
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lk\
                      IjoiZjM1YWFjYzEtYTljZC00ZWRhLWI2ZDAtMmVmYWRkZjBjOGE0Iiwia\
                      XNzIjoic2VsZi1pc3N1ZWQiLCJleHAiOjE1ODAyMzkyMjh9.P8hA0ru_x\
                      riYX7qryl08ZEp86t5HD_AEVPEUXY70Ehc"
        400:
          description: Invalid request
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'
        500:
          description: Internal server error occurred
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'

  /biome/users:
    get:
      tags:
        - Biome
      description: Lists all users
      parameters:
        - $ref: "#/components/parameters/protocol_version"
      responses:
        200:
          description: List of users registered in Biome
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
                      description: "Username used for login"
                      example: "alice@acme.com"
                    user_id:
                      type: string
                      description: "Internal unique identifier for the user"
                      example: "f35aacc1-a9cd-4eda-b6d0-2efaddf0c8a4"
        500:
          description: Internal server error occurred
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'

  /biome/users/{user_id}:
    get:
      tags:
      - Biome
      description: Fetch a user by ID
      parameters:
        - $ref: "#/components/parameters/protocol_version"
        - name: user_id
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
            example: "f35aacc1-a9cd-4eda-b6d0-2efaddf0c8a4"
      responses:
        200:
          description: User information
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: "Username used for login"
                    example: "alice@acme.com"
                  user_id:
                    type: string
                    description: "Internal unique identifier for the user"
                    example: "f35aacc1-a9cd-4eda-b6d0-2efaddf0c8a4"
        400:
          description: Invalid request
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'
        404:
          description: Resource not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'
        500:
          description: Internal server error occurred
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'
    put:
      tags:
      - Biome
      description: Update a user
      parameters:
        - $ref: "#/components/parameters/protocol_version"
        - name: user_id
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
            example: "f35aacc1-a9cd-4eda-b6d0-2efaddf0c8a4"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  description: Existing username of user
                hashed_password:
                  description: |
                    Hashed password to be used for user authentication
                new_password:
                  description: |
                    Hash of the new password to be used for user authentication
              required:
                - username
                - hashed_password
              example:
                username: alice@acme.com
                hashed_password: |-
                  8945622435187243046536949706b5272644c71336c7254563679727565494b376d4b3554696b734662685962652f6v52562e437a70462f6552489c8b
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User updated successfully"
        400:
          description: Invalid request
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'
        404:
          description: Resource not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'
        500:
          description: Internal server error occurred
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'

  /biome/users/{user_id}/keys:
    get:
      tags:
      - Biome
      description: List keys of a user
      parameters:
        - $ref: "#/components/parameters/protocol_version"
        - name: user_id
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
            example: "f35aacc1-a9cd-4eda-b6d0-2efaddf0c8a4"
      responses:
        200:
          description: User's keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BiomeUserKey'
        400:
          description: Invalid request
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'
        401:
          description: User not authorized
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'
        500:
          description: Internal server error occurred
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'
    patch:
      tags:
      - Biome
      description: Update a key's display name
      parameters:
        - $ref: "#/components/parameters/protocol_version"
        - name: user_id
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
            example: "f35aacc1-a9cd-4eda-b6d0-2efaddf0c8a4"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                public_key:
                  description: Public key
                new_display_name:
                  description: |
                    Updated display name for the key
              required:
                - public_key
                - new_display_name
              example:
                public_key: "026c889058c2d22558ead2c61b321634b74e705c42f890e6b7bc2c80abb4713118"
                new_display_name: |-
                  Admin key pair
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Key updated successfully"
        400:
          description: Invalid request
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'
        401:
          description: User not authorized
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'
        404:
          description: Resource not found
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'
        500:
          description: Internal server error occurred
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'
    post:
      tags:
      - Biome
      description: Add a new key for user
      parameters:
        - $ref: "#/components/parameters/protocol_version"
        - name: user_id
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
            example: "f35aacc1-a9cd-4eda-b6d0-2efaddf0c8a4"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BiomeUserKey'
      responses:
        200:
          description: User added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully"
        400:
          description: Invalid request
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'
        401:
          description: User not authorized
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'
        500:
          description: Internal server error occurred
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorBiome'

components:
  parameters:
    protocol_version:
      schema:
        type: integer
        example: 1
      description: The protocol version which the client can understand
      in: header
      name: SplinterProtocolVersion

  schemas:
    Error:
      additionalProperties: false
      properties:
        message:
          description: A message describing the error that occurred
          type: string
          example: DatabaseError({description})
      required:
        - message

    ErrorBiome:
      additionalProperties: false
      properties:
        code:
          description: Error code
          type: string
          example: 400
        message:
          description: A message describing the error that occurred
          type: string
          example: "Invalid payload"
      required:
        - message

    Status:
      additionalProperties: false
      properties:
        version:
          description: Rest API version
          type: string
          example: "0.3.12"
        node_id:
          description: Node id
          type: string
          example: node-009
        endpoint:
          description: The node's service endpoint
          example: tcp://foo.bar.biz
      required:
        - version

    ApplicationRegistration:
      additionalProperties: false
      properties:
        status:
          description: Registration status
          type: string
          enum:
            - OK
            - ERROR
        circuit_management_type:
          description: Circuit management type
          type: string
          example: gameroom
        error_reason:
          description: Error message if the registration failed
          type: string

    RegisteredNode:
      type: object
      properties:
        identity:
          type: string
        endpoint:
          type: string
        display_name:
          type: string
        metadata:
          type: object
      example:
        identity: node-123123-asdf
        endpoint: tls://12.0.0.123:8431
        display_name: Cargill - Node 1
        metadata:
          company: Cargill
          status: Up

    PublicKeyInfo:
      type: object
      properties:
        public_key:
          type: string
        node_id:
          type: string
        metadata:
          type: object
          additionalProperties: true
          example:
            name: Jane User
            organization: Acme Corporation

    Link:
      type: object
      properties:
        link:
          type: string
          description: link to batch_statuses endpoint
          example: "/scabbard/{circuit_id}/{service_id}/batch_statuses?ids={ids}"

    BatchStatus:
      type: object
      properties:
        id:
          type: string
          description: Batch header signature
          example: 6ff35474a572087e08fd6a54d563bd8172951b363e5c9731f1a40a855e14bba45dac515364a08d8403f4fb5d4a206174b7f63c29e4f4e425dc71b95494b8a798
        status:
          type: object
          description: Batch status
          properties:
            statusType:
              type: string
              enum:
                - Unknown
                - Invalid
                - Valid
                - Pending
                - Committed
            message:
                type: array
                items:
                  type: object
                  properties:
                    transaction_id:
                      type: string
                      example: f4e147ff464013deccb3e68bb8619beffb29ff86b401257c93bcf8ef76d7ca173fa84b4f4a58414ad2d00a2c9f810cbb726e01cd26ebd44720239d9d35853099
                    error_message:
                      type: string
                      example: "Wasm contract returned invalid transaction: xo, 0.3.3"
                    error_data:
                      type: array
                      items:
                        type: integer
    Circuit:
      type: object
      properties:
        circuit_id:
          type: string
          example: alpha
        authorization_type:
          type: string
          example: Trust
        persistence:
          type: string
          example: Any
        routes:
          type: string
          example: Any
        circuit_management_type:
          type: string
          example: Gameroom
        members:
          type: array
          items:
            $ref: '#/components/schemas/CircuitMember'
        roster:
          type: array
          items:
            $ref: '#/components/schemas/CircuitService'

    CircuitMember:
      type: object
      properties:
        node_id:
          type: string
          example: node-000
        endpoint:
          type: string
          example: tls://127.0.0.1:8080

    CircuitService:
      type: object
      properties:
        service_id:
          type: string
          example: service-a
        service_type:
          type: string
          example: scabbard
        allowed_nodes:
          type: array
          items:
            type: string

    Proposal:
      type: object
      properties:
        proposal_type:
          type: object
          description: The type of circuit proposal
          properties:
            statusType:
              type: string
              enum:
                - Create
                - UpdateRoster
                - AddNode
                - RemoveNode
                - Destroy
        circuit_id:
          type: string
          example: "circuit-000"
        ciircuit_hash:
          type: string
          example: "8ce518770b962429a953b10220905ac9adf86a855f0b085695f444edf991b8ca"
        circuit_proposal:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Circuit"
        votes:
          type: array
          items:
            $ref: '#/components/schemas/VoteRecord'
        requester:
          type: string
          example: "026c889058c2d22558ead2c61b321634b74e705c42f890e6b7bc2c80abb4713118"
        requester_node_id:
          type: string
          example: "node-000"

    VoteRecord:
      type: object
      properties:
        public_key:
          type: string
          example: "026c889058c2d22558ead2c61b321634b74e705c42f890e6b7bc2c80abb4713118"
        vote:
          type: object
          properties:
            voteType:
              type: string
              enum:
                - Accept
                - Reject
        voter_node_id:
          type: string
          example: "node-000"

    Paging:
      type: object
      properties:
        current:
          type: string
        offset:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        first:
          type: string
        prev:
          type: string
        next:
          type: string
        last:
          type: string
      example:
        current: /admin/nodes?offset=10&limit=10
        offset: 10
        limit: 10
        total: 50
        first: /admin/nodes?offset=0&limit=10
        prev: /admin/nodes?offset=0&limit=10
        next: /admin/nodes?offset=20&limit=10
        last: /admin/nodes?offset=40&limit=10

    BiomeUserKey:
      type: object
      properties:
        display_name:
          type: string
          description: "Display name for key"
          example: "Biome Admin Key"
        encrypted_private_key:
          type: string
          description: "Encrypted private key"
          example: "XNzIjoic2VsZi1pc3N1ZWQiLCJleHAiOjE1ODAyMzkyMjh9.P8hA0ru_x\
            riYX7qryl08ZEp86t5HD_AEVPEUXY70Ehc"
        public_key:
          type: string
          description: "Public key"
          example: "026c889058c2d22558ead2c61b321634b74e705c42f890e6b7bc2c80abb4713118"
        user_id:
          type: string
          description: "Internal unique identifier for the user"
          example: "f35aacc1-a9cd-4eda-b6d0-2efaddf0c8a4"

tags:
  - name: Biome
    description: Routes supporting user management in Splinter applications. Optionally compiled.
