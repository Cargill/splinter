# Copyright 2019 Cargill Incorporated
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

openapi: '3.0.0'

info:
  version: 0.2.1
  title: SplinterD API
  description: REST API for SplinterD

servers:
  - url: http://localhost:9000/api

paths:
  /status:
    get:
      tags:
        - diagnostics
      description: Used to check if server is successfully running
      responses:
        200:
          description: Server is running correctly and accepting connections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/circuit:
    get:
      tags:
        - Admin Service
      description: Retrieve a list of all circuits
      responses:
        200:
          description: A list of circuits
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Circuit'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Admin Service
      description: Create a new circuit
      requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCircuit'
      responses:
        202:
          description: Creation request was accepted
        400:
          description: Circuit creation request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/circuit/{name}:
    get:
      tags:
        - Admin Service
      description: Get circuit with {name}
      parameters:
        - name: name
          description: Circuit name. This name is unique.
          in: path
          required: true
          schema:
            type: string
          x-example: circuit_xyz
      responses:
        200:
          description: Circuit with specified name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Circuit'
        404:
          description: The circuit with {name} was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/vote:
    post:
      tags:
        - Admin Service
      description: Send vote to admin service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CircuitProposalVote'
      responses:
        202:
          description: The vote was accepted
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /ws/admin/register/{type}:
    get:
      tags:
        - Admin Service
      description: Register the handler for a circuit management type
      parameters:
        - name: type
          description: The circuit management type is the type of circuit the handler will manage
          in: path
          required: true
          schema:
            type: string
          x-example: gameroom
      responses:
        200:
          description: Registration request was successfully submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationRegistration'
        400:
          description: The circuit management type was invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /nodes:
    get:
      tags:
          - Node Registry
      description: List nodes in the Node Registry
      parameters:
        - name: offset
          in: query
          description: paging offset
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: maximum number of items to return (max 100)
          required: false
          schema:
            type: integer
            default: 100
        - name: filter
          in: query
          description: |
            url-encodeded stringified JSON containing property filters in the format
              {NODE_PROPERTY:[{"operator":OPERATOR,"value":VALUE}]}
          required: false
          schema:
            type: string
          example: "%7B%22company%22%3A%5B%22%3D%22%2C%22Cargill%22%5D%7D"
      responses:
        200:
          description: list of nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RegisteredNode'
                  paging:
                    $ref: '#/components/schemas/Paging'
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /nodes/{identity}:
      get:
        tags:
          - Node Registry
        description: Fetch a nodes in the Node Registry by their identity
        parameters:
          - name: identity
            in: path
            description: identity of node to fetch
            required: true
            schema:
              type: string
        responses:
          200:
            description: Node
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      $ref: "#/components/schemas/RegisteredNode"
          404:
            description: The node with {identity} was not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'


components:
  schemas:
    Error:
      additionalProperties: false
      properties:
        message:
          description: A message describing the error that occurred
          type: string
          example: DatabaseError({description})
      required:
        - message

    Status:
      additionalProperties: false
      properties:
        version:
          description: Rest API version
          type: string
          example: "0.2.1"
        node_id:
          description: Node id
          type: string
          example: node-009 
        endpoint:
          description: The node's service endpoint
          example: tcp://foo.bar.biz
      required:
        - version

    CreateCircuit:
      additionalProperties: false
      properties:
        circuit_id:
          description: Name of circuit
          type: string
          example: alpha
        authorization_type:
          description: Authentication type
          type: string
          enum:
            - TRUST_AUTHORIZATION
        members:
          description: Array of nodes allowed to participate on the circuit
          type: array
          items:
            $ref: '#/components/schemas/SplinterNode'
        roster:
          description: Array of services that will communicate over a circuit
          type: array
          items:
            $ref: '#/components/schemas/SplinterService'
        persistence:
          type: string
          enum:
            - ANY_PERSISTENCE
        circuit_management_type:
          type: string
          example: gameroom
        routes:
          type: string
          enum:
            - ANY_ROUTE
        application_metadata:
          description: serialized bytes of metadata
          type: array 
          items:
            type: integer

    SplinterNode:
      additionalProperties: false
      properties:
        node_id:
          description: Unique identifier for node
          type: string
          example: "012"
        endpoint:
          description: Url for node
          type: string
          example: tcp://localhost:4040
    SplinterService:
      additionalProperties: false
      properties:
        service_id:
          type: string
          example: service-123
        service_type:
          type: string
          example: gameroom
        allowed_nodes:
          type: array
          items:
            type: string

    Circuit:
      additionalProperties: false
      properties:
        status:
          description: Circuit status
          type: string
          enum:
            - CREATED
            - PENDING
            - DESTROYED
            - CREATION_ERROR
        name:
          description: Name of circuit
          type: string
          example: alpha
        auth:
          description: Authentication type
          type: string
          example: trust
        members:
          description: Array of nodes allowed to participate on the circuit
          type: array
          items:
            $ref: '#/components/schemas/SplinterNode'
        roster:
          description: Array of services that will communicate over circuit
          type: array
          items:
            type: string
        persistence:
          type: string
          example: any
        durability:
          type: string
          example: none
        routes:
          type: string
          example: request_direct

    ApplicationRegistration:
      additionalProperties: false
      properties:
        status:
          description: Registration status
          type: string
          enum:
            - OK
            - ERROR
        circuit_management_type:
          description: Circuit management type
          type: string
          example: gameroom
        error_reason:
          description: Error message if the registration failed
          type: string
    
    RegisteredNode:
      type: object
      properties:
        identity:
          type: string
      additionalProperties: true
      example:
        identity: node-123123-asdf
        company: Cargill
        status: Up

    Ballot:
      type: object
      properties:
        circuit_id:
          type: string
          example: circuit-000
        circuit_hash:
          type: string
          example: d2b1abbd57e8cd2bfcf3f4259b9785a723e19b4bb4d5cc0206e860890c403dc4
        vote:
          type: string
          enum:
            - Accept
            - Reject

    CircuitProposalVote:
      type: object
      properties:
        ballot:
          $ref: '#/components/schemas/Ballot'
        ballot_signature:
          type: array
          items:
            type: integer
        signer_public_key:
          type: array
          items:
            type: integer

    
    Paging:
      type: object
      properties:
        current:
          type: string
        offset: 
          type: integer
        limit:
          type: integer
        total:
          type: integer
        first:
          type: string
        prev:
          type: string
        next:
          type: string
        last:
          type: string
      example:
        current: /nodes?offset=10&limit=10
        offset: 10
        limit: 10
        total: 50
        first: /nodes?offset=0&limit=10
        prev: /nodes?offset=0&limit=10
        next: /nodes?offset=20&limit=10
        last: /nodes?offset=40&limit=10
