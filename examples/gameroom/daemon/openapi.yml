# Copyright 2019 Cargill Incorporated
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

openapi: '3.0.0'

info:
  version: 0.2.1
  title: GameroomD API
  description: REST API for GameroomD

servers:
  - url: http://localhost:8000

paths:
  /nodes:
    get:
      tags:
          - Node Registry
      description: List nodes in the Node Registry
      parameters:
        - name: offset
          in: query
          description: paging offset
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: maximum number of items to return (max 100)
          required: false
          schema:
            type: integer
            default: 100
        - name: filter
          in: query
          description: |
            url-encodeded stringified JSON containing property filters in the format
              {NODE_PROPERTY:[{"operator":OPERATOR,"value":VALUE}]}
          required: false
          schema:
            type: string
          example: "%7B%22company%22%3A%5B%22%3D%22%2C%22Cargill%22%5D%7D"
      responses:
        200:
          description: list of nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Node'
                  paging:
                    $ref: '#/components/schemas/Paging'
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /nodes/{identity}:
      get:
        tags:
          - Node Registry
        description: Fetch a node in the Node Registry by their identity
        parameters:
          - name: identity
            in: path
            description: identity of node to fetch
            required: true
            schema:
              type: string
        responses:
          200:
            description: Node
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      $ref: "#/components/schemas/Node"
          404:
            description: The node with {identity} was not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

  /api/users:
      post:
        description: Create new Gameroom User entry in database
        requestBody:
          content:
            application/json:
              schema:
                properties:
                  email:
                    description: Email of a new user
                  hashed_password:
                    description: |
                      Hashed password to be used for user authentication.
                      This password should be hashed by the client, which will be
                      hashed again before storing in the database.
                  public_key:
                    description: User's public key related to their identity
                  encrypted_private_key:
                    description: |
                      The participant's encrypted private key. This private key
                      should be generated by the client, encrypted using the
                      participant's raw password, and encoded as a hex string.
                required:
                  - username
                  - hashed_password
                  - public_key
                  - encrypted_private_key
                example:
                  email: Anne@AcmeCorp.com
                  hashed_password: |
                    8945622435187243046536949706b5272644c71336c7254563679727565494b376d4b3554696b734662685962652f6v52562e437a70462f6552489c8b
                  encrypted_private_key: |
                    90463c75738163694f694a49557a49314e694973496d5634634349364d5455794f9853404d6a41344d43776961574630496a6f784e5449344e7a4d344e44677766512e65794a7764574a7361574e6661325635496a6f694d444a6d4d7a49304d4755775a4467334e324930596d4d334d6a67784d4745794e7a41344e7a4133596d4933596d51354f546b795a5468685a4467774e47526c4d5451774d7a4a6d4e6d4933597a63794e6d5a69597a5931496e302e6c65415a6c6175542d7178742d346c64682d6d3145755a7465596b425845456173557142417353795f5a4d
                  public_key: 395acb89a89835ffd4ecaf92baeb83b74eea6e5ade10a5c570debfd12a772baa87
        responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AuthResponseData'
          400:
            description: Invalid request was made
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          500:
            description: Internal server error occurred
          503:
            description: Server unavailable

  /api/users/authenticate:
      post:
        description: Authenticate a Gameroom User
        requestBody:
          content:
            application/json:
              schema:
                properties:
                  eamil:
                    description: Email of a new user
                  hashed_password:
                    description: |
                      Hashed password to be used for user authentication.
                      This password should be hashed by the client, which will be
                      hashed again before storing in the database.
                required:
                  - username
                  - hashed_password
                example:
                  email: Anne@AcmeCorp.com
                  hashed_password: |
                    8945622435187243046536949706b5272644c71336c7254563679727565494b376d4b3554696b734662685962652f6v52562e437a70462f6552489c8b
        responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AuthResponseData'
          401:
            description: Unauthorized request
          500:
            description: Internal server error occurred
          503:
            description: Server unavailable


  /gamerooms/propose:
      post:
        description: Propose a new Gameroom
        requestBody:
          content:
            application/json:
              schema:
                properties:
                  alias:
                    description: Name of new Gameroom
                  member:
                    description: Proposed members of the Gameroom
                required:
                  - alias
                  - member
                example:
                  alias: My_Gameroom
                  member:
                    $ref: '#/components/schemas/Member'

        responses:
          202:
            description: Create Gameroom proposal has been accepted
          500:
            description: Internal server error occurred

  /proposals:
    get:
      description: List Circuit Proposals
      parameters:
      - name: offset
        in: query
        description: paging offset
        required: false
        schema:
          type: integer
          default: 0
      - name: limit
        in: query
        description: maximum number of items to return (max 100)
        required: false
        schema:
          type: integer
          default: 100
      responses:
        200:
          description: list of circuit proposals
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiCircuitProposal'
                  paging:
                    $ref: '#/components/schemas/Paging'
        500:
          description: Internal server error occurred
        503:
          description: Server unavailable

  /proposals/{proposal_id}:
    get:
      description: Fetch a circuit proposal by the proposal id
      parameters:
        - name: proposal_id
          in: path
          description: identity of the proposal to fetch
          required: true
          schema:
            type: string
      responses:
        200:
          description: Circuit proposal
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ApiCircuitProposal'
        404:
          description: The proposal with {proposal_id} was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error occurred
        503:
          description: Server unavailable

components:
  schemas:
    Error:
      additionalProperties: false
      properties:
        message:
          description: A message describing the error that occurred
          type: string
          example: DatabaseError({description})
      required:
        - message


    ApiCircuitProposal:
      type: object
      properties:
        proposal_id:
          type: string
        members:
          type: array
          items:
            $ref: '#/components/schemas/ApiCircuitMember'
        requester:
          type: string
        created_time:
          description: time in seconds since the unix epoch the proposal was created
          type: integer
        updated_time:
          description: time in seconds since the unix epoch the proposal was updated
          type: integer


    ApiCircuitMember:
      type: object
      properties:
        node_id:
          type: string
        endpoint:
          type: string


    Member:
      type: object
      properties:
        identity:
          type: string
        metadata:
          $ref: '#/components/schemas/MemberMetadata'


    MemberMetadata:
      type: object
      properties:
        organization:
          type: string
        endpoint:
          type: string


    AuthResponseData:
      type: object
      properties:
        email:
          type: string
        public_key:
          type: string
        encrypted_private_key:
          type: string


    Node:
      type: object
      properties:
        identity:
          type: string
      additionalProperties: true
      example:
        identity: node-123123-asdf
        company: Cargill
        status: Up

    Paging:
      type: object
      properties:
        current:
          type: string
        offset:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        first:
          type: string
        prev:
          type: string
        next:
          type: string
        last:
          type: string
      example:
        current: /nodes?offset=10&limit=10
        offset: 10
        limit: 10
        total: 50
        first: /nodes?offset=0&limit=10
        prev: /nodes?offset=0&limit=10
        next: /nodes?offset=20&limit=10
        last: /nodes?offset=40&limit=10
