# Copyright 2019 Cargill Incorporated
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: '3'

volumes:
  cargo-registry:
  acme-var:
  bubba-var:

services:

    db-acme:
      image: gameroom-database
      container_name: db-acme
      build:
        context: ../..
        dockerfile: ./examples/gameroom/database/Dockerfile-installed
        args:
          - REPO_VERSION=${REPO_VERSION}
      restart: always
      expose:
        - 5432
      ports:
          - "5432:5432"
      environment:
        POSTGRES_USER: gameroom
        POSTGRES_PASSWORD: gameroom_example
        POSTGRES_DB: gameroom
      volumes:
        - "./database/tables:/docker-entrypoint-initdb.d"

    gameroom-app-acme:
      build:
        context: ../..
        dockerfile: ./examples/gameroom/gameroom-app/Dockerfile-installed
        args:
          VUE_APP_BRAND: "acme"
          REPO_VERSION: ${REPO_VERSION}
      image: gameroom-app-acme
      container_name: gameroom-app-acme
      environment:
        - VUE_APP_BRAND=acme
      expose:
        - 80
      ports:
        - '8080:80'

    gameroomd-acme:
        image: gameroomd
        container_name: gameroomd-acme
        build:
          context: ../..
          dockerfile: ./examples/gameroom/daemon/Dockerfile-installed-${DISTRO}
          args:
            - CARGO_ARGS=${CARGO_ARGS}
            - REPO_VERSION=${REPO_VERSION}
        volumes:
          - cargo-registry:/root/.cargo/registry
        expose:
          - 8000
        ports:
          - "8000:8000"
        depends_on:
          - splinterd-node-acme
        command: |
          bash -c "
            # we need to wait for the db to have started.
            until PGPASSWORD=gameroom_example psql -h db-acme -U gameroom -c '\q'; do
                >&2 echo \"Database is unavailable - sleeping\"
                sleep 1
            done

            # check if splinterd-node-acme is available
            while [[ $$(curl --write-out %{http_code} --silent --output /dev/null http://splinterd-node-acme:8085/status) -ne 200 ]] ; do
               >&2 echo \"SplinterD is unavailable - sleeping\"
               sleep 1
            done

            gameroomd -vv --database-url postgres://gameroom:gameroom_example@db-acme:5432/gameroom \
              -b gameroomd-acme:8000 --splinterd-url http://splinterd-node-acme:8085
          "
    splinterd-node-acme:
      image: splinterd-node
      container_name: splinterd-node-acme
      build:
        context: ../..
        dockerfile: splinterd/Dockerfile-installed-${DISTRO}
        args:
          - CARGO_ARGS=${CARGO_ARGS}
          - REPO_VERSION=${REPO_VERSION}
      expose:
        - 8080
        - 8044
        - 8945
        - 8085
      ports:
        - 8088:8085
      volumes:
        - ./key_registry:/input
        - acme-var:/var/lib/splinter
        - ./splinterd-config:/configs
        - ./node_registry:/node_registry
      entrypoint: |
        bash -c "
          if [ ! -f /var/lib/splinter/keys.yaml ]
          then
            splinter admin keyregistry \
              -i /input/key_registry_spec_acme.yaml \
              --force
          fi

          splinter cert generate --skip && \
          splinterd -c ./configs/splinterd-node-acme.toml -vv \
              --service-endpoint 0.0.0.0:8043 \
              --network-endpoint 0.0.0.0:8044 \
              --bind 0.0.0.0:8085 \
              --insecure
        "

    db-bubba:
      image: gameroom-database
      container_name: db-bubba
      build:
        context: ../..
        dockerfile: ./examples/gameroom/database/Dockerfile-installed
        args:
          - REPO_VERSION=${REPO_VERSION}
      restart: always
      expose:
        - 5432
      ports:
          - "5433:5432"
      environment:
        POSTGRES_USER: gameroom
        POSTGRES_PASSWORD: gameroom_example
        POSTGRES_DB: gameroom
      volumes:
        - "./database/tables:/docker-entrypoint-initdb.d"

    gameroom-app-bubba:
      build:
        context: ../..
        dockerfile: ./examples/gameroom/gameroom-app/Dockerfile-installed
        args:
          VUE_APP_BRAND: "bubba"
          REPO_VERSION: ${REPO_VERSION}
      image: gameroom-app-bubba
      container_name: gameroom-app-bubba
      environment:
        - VUE_APP_BRAND=bubba
      expose:
        - 80
      ports:
        - '8081:80'

    gameroomd-bubba:
        image: gameroomd
        container_name: gameroomd-bubba
        build:
          context: ../..
          dockerfile: ./examples/gameroom/daemon/Dockerfile-installed-${DISTRO}
          args:
            - CARGO_ARGS=${CARGO_ARGS}
            - REPO_VERSION=${REPO_VERSION}
        volumes:
          - cargo-registry:/root/.cargo/registry
        expose:
          - 8000
        ports:
          - "8001:8000"
        depends_on:
          - splinterd-node-bubba
        command: |
          bash -c "
            # we need to wait for the db to have started.
            until PGPASSWORD=gameroom_example psql -h db-bubba -U gameroom -c '\q'; do
                >&2 echo \"Database is unavailable - sleeping\"
                sleep 1
            done

            # check if splinterd-node-bubba is available
            while [[ $$(curl --write-out %{http_code} --silent --output /dev/null http://splinterd-node-bubba:8085/status) -ne 200 ]] ; do
               >&2 echo \"SplinterD is unavailable - sleeping\"
               sleep 1
            done

            gameroomd -vv --database-url postgres://gameroom:gameroom_example@db-bubba:5432/gameroom \
              -b gameroomd-bubba:8000 --splinterd-url http://splinterd-node-bubba:8085
          "

    splinterd-node-bubba:
      image: splinterd-node
      container_name: splinterd-node-bubba
      build:
        context: ../..
        dockerfile: splinterd/Dockerfile-installed-${DISTRO}
        args:
          - CARGO_ARGS=${CARGO_ARGS}
          - REPO_VERSION=${REPO_VERSION}
      expose:
        - 8080
        - 8044
        - 8945
        - 8085
      ports:
        - 8089:8085
      volumes:
        - ./key_registry:/input
        - ./splinterd-config:/configs
        - ./node_registry:/node_registry
        - bubba-var:/var/lib/splinter
      entrypoint: |
        bash -c "
          if [ ! -f /var/lib/splinter/keys.yaml ]
          then
            splinter admin keyregistry \
              -i /input/key_registry_spec_bubba.yaml \
              --force
          fi

          splinter cert generate --skip && \
          splinterd -c ./configs/splinterd-node-bubba.toml -vv \
              --service-endpoint 0.0.0.0:8043 \
              --network-endpoint 0.0.0.0:8044 \
              --bind 0.0.0.0:8085 \
              --insecure
        "
