# Copyright 2019 Cargill Incorporated
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: '3'

volumes:
  cargo-registry:
  splinter-shared:

services:

  gameroom-app-test:
    build:
      context: ../../../..
      dockerfile: examples/gameroom/gameroom-app/Dockerfile-installed
      args:
        VUE_APP_BRAND: "acme"
        REPO_VERSION: ${REPO_VERSION}
    image: gameroom-app-test
    container_name: gameroom-app-test
    environment:
      - VUE_APP_BRAND=acme

  gameroom-app-integration-test:
    build:
      context: ../
      dockerfile: ./cypress/Dockerfile
    image: gameroom-app-integration-test
    container_name: gameroom-app-integration-test
    depends_on:
      - gameroom-app-test
    environment:
      - CYPRESS_baseUrl=http://gameroom-app-test
    command: npx cypress run
    volumes:
      - ../cypress:/app/cypress
      - ../cypress/cypress.json:/app/cypress.json

  gameroomd-acme:
    image: gameroomd
    container_name: gameroomd-acme
    build:
      context: ../../../..
      dockerfile: ./examples/gameroom/daemon/Dockerfile-installed-${DISTRO}
      args:
        - REPO_VERSION=${REPO_VERSION}
    volumes:
      - cargo-registry:/root/.cargo/registry
    expose:
      - 8000
    ports:
      - "8000:8000"
    depends_on:
      - splinterd-node
    command: |
      bash -c "
        # we need to wait for the db to have started.
        until PGPASSWORD=gameroom_test psql -h db-cypress-test -U gameroom_test -c '\q'; do
            >&2 echo \"Database is unavailable - sleeping\"
            sleep 1
        done

        # check if splinterd-node is available
        while [[ $$(curl --write-out %{http_code} --silent --output /dev/null http://splinterd-node:8085/status) -ne 200 ]] ; do
           >&2 echo \"SplinterD is unavailable - sleeping\"
           sleep 1
        done

        gameroomd -vv --database-url postgres://gameroom_test:gameroom_test@db-cypress-test:5432/gameroom_test \
          -b gameroomd-acme:8000 --splinterd-url http://splinterd-node:8085
      "

  generate-shared:
      image: splinter-cli
      build:
        context: ../../../..
        dockerfile: cli/Dockerfile-installed-${DISTRO}
        args:
          - REPO_VERSION=${REPO_VERSION}
      volumes:
        - splinter-shared:/splinter_shared
      command: |
        bash -c "
          if [ ! -f /splinter_shared/private/server.key ]
          then
            splinter cert generate \
              -d  /splinter_shared/ \
              --force
          fi
          tail -f /dev/null
        "

  splinterd-node:
    image: splinterd-node
    expose:
      - 8080
      - 8043
      - 8945
      - 8085
    ports:
      - 8090:8085
    volumes:
      - ../:/project/tests
      - splinter-shared:/splinter_shared
    build:
      context: ../../../..
      dockerfile: splinterd/Dockerfile-installed-${DISTRO}
      args:
        - REPO_VERSION=${REPO_VERSION}
    entrypoint: |
      bash -c "
        # We need to wait for the generated certificates and keys to be
        # available
        while [ ! -f /splinter_shared/private/server.key ]; do \
          echo 'waiting for certs and keys'; \
          sleep 1; \
        done && \
        # Copy the generated keys and certificates to its expected location
        cp -a /splinter_shared/. /etc/splinter/certs && \
        splinterd --insecure -c ./project/tests/splinterd-node-0-docker.toml -vv
      "

  db-cypress-test:
    image: gameroom-database
    container_name: db-cypress-test
    build:
      context: ../../../..
      dockerfile: ./examples/gameroom/database/Dockerfile-installed
    restart: always
    expose:
      - 5432
    ports:
        - "5430:5432"
    environment:
      POSTGRES_USER: gameroom_test
      POSTGRES_PASSWORD: gameroom_test
      POSTGRES_DB: gameroom_test
    volumes:
      - "../../database/tables:/docker-entrypoint-initdb.d"
